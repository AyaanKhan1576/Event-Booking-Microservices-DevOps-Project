LAUNCH SERVICES

user service: uvicorn main:app --reload --port 8000
booking-service: flask run --host=0.0.0.0Â --port=5001
new-event-service: nodse server.js
notification-servie: node server.js
notification-test: node test-producer.js


DATABASES:
See all Tables: \dt
See all Databases: \l
Select Database: \c DatabaseName

Booking: 
psql -U postgres -d bookingdb  
postgresql://postgres:123456789@localhost:5432/bookingdb

Event:
mongodb://localhost:27017/new-eventdb

Mongo Commands:
db.events.find().pretty()
db.events.deleteMany({})


PORTS:

user-service : 8000
notification-service : 5002
event-service : 5000
booking-service : 5001


Within Booking Service when running new project:
1. Delete existing migrations folder
2. flask db upgrade  # Ensure migrations are applied
3. flask db init
4. flask db migrate -m "Initial migration"
5. flask db upgrade


DOCKER CONTAINERS:

docker-compose up --build -d
docker-compose down -v

User: 
(Until Postgres is mentioned in docker compose)
docker run -e DATABASE_URL="postgresql://postgres:123456789@host.docker.internal:5432/user_service_db" -p 8000:8000 user-service:latest
(otherwise)
docker run --env-file .env -p 8000:8000 user-service:latest

User:
docker run --env-file .env -p 8000:8000 user-service:latest
EVENT_SERVICE_URL=http://new-event-service:5000/api/events ( if running locally use localhost:5000/api/events )
BOOKING_SERVICE_URL=http://booking-service:5001/book_ticket



(if host)
DATABASE_URL=postgresql://postgres:123456789@host.docker.internal:5432/user_service_db
(if container)
DATABASE_URL=postgresql://postgres:123456789@postgres:5432/user_service_db


Booking:
docker run --env-file .env -p 5001:5001 booking-service:latest

otherwise in env Change
(if host)
DATABASE_URL=postgresql://postgres:123456789@host.docker.internal:5432/booking_service_db
CELERY_BROKER_URL=pyamqp://guest:guest@host.docker.internal//

(if container)
DATABASE_URL=postgresql://postgres:123456789@postgres:5432/bookingdb
CELERY_BROKER_URL=pyamqp://guest:guest@rabbitmq//


Event: (Change these in env)

docker run --env-file .env -p 5000:5000 new-event-service:latest

(If mongo on Host)
MONGO_URI=mongodb://host.docker.internal:27017/new-eventdb
(If mongo in container)
MONGO_URI=mongodb://mongodb:27017/new-eventdb


Notification:
docker run --env-file .env -p 5002:5002 notification-service-main:latest
docker run --env-file .env notification-service-test:latest

(if host)
MONGO_URI=mongodb://host.docker.internal:27017/notifications-service-db
RABBITMQ_URL=amqp://host.docker.internal

(if container)
MONGO_URI=mongodb://mongo:27017/notifications-service-db
RABBITMQ_URL=amqp://guest:guest@rabbitmq:5672


Kubernetes:

kubectl delete namespace online-event-booking-ayaankhan

kubectl apply -f namespace.yaml

kubectl apply -f deployment-service-postgres.yaml
kubectl apply -f deployment-service-mongodb.yaml
kubectl apply -f deployment-service-rabbitmq.yaml
kubectl apply -f deployment-service-user.yaml
kubectl apply -f deployment-service-event.yaml
kubectl apply -f deployment-service-booking.yaml
kubectl apply -f deployment-service-notification.yaml

kubectl apply -f configmap.yaml
kubectl apply -f secrets.yaml
kubectl apply -f ingress.yaml

kubectl apply -f https://raw.githubusercontent.com/kubernetes/ingress-nginx/main/deploy/static/provider/cloud/deploy.yaml

kubectl get pods -n online-event-booking-ayaankhan
kubectl get svc -n online-event-booking-ayaankhan
kubectl get ingress -n online-event-booking-ayaankhan
kubectl logs user-service-6b5798475b-wl2lk -n online-event-booking-ayaankhan

kubectl port-forward svc/user-service 8000:80 -n online-event-booking-ayaankhan

kubectl get pods -n ingress-nginx
kubectl get ingress -n online-event-booking-ayaankhan

to fix the ingres thing:
kubectl get svc -n ingress-nginx
kubectl patch svc ingress-nginx-controller -n ingress-nginx --type='json' -p '[{"op": "replace", "path": "/spec/type", "value": "LoadBalancer"}]'
kubectl get svc -n ingress-nginx
kubectl port-forward svc/ingress-nginx-controller -n ingress-nginx 8080:80





