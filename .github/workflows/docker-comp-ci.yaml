name: Docker Compose Integration Test

on:
  pull_request:
    branches: [main]
  push:
    branches: [main]

jobs:
  integration-test:
    strategy:
      matrix:
        os: [ubuntu-latest, windows-latest]
    runs-on: ${{ matrix.os }}
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Set up Buildx
        uses: docker/setup-buildx-action@v2

      - name: Login to Docker Hub
        uses: docker/login-action@v3
        with:
          username: ${{ secrets.DOCKERHUB_USERNAME }}
          password: ${{ secrets.DOCKERHUB_TOKEN }}

      - name: Build and start containers
        run: |
          docker compose -f docker-compose.yml build
          docker compose -f docker-compose.yml up -d
      
      - name: Wait for critical services
        run: |
          docker compose run --rm wait-for postgres:5432 -t 30
          docker compose run --rm wait-for mongodb:27017 -t 30
          docker compose run --rm wait-for rabbitmq:5672 -t 30

      - name: Run smoke tests
        run: |
          # Test User Service
          curl -sSf http://localhost:8000/ > /dev/null
          
          # Test Event Service
          curl -sSf http://localhost:5000/api/events > /dev/null
          
          # Test Booking Service
          curl -sSf http://localhost:5001/health > /dev/null

      - name: Clean up
        if: always()
        run: docker compose down --volumes

      
      # - name: Wait for services to be ready
      #   run: |
      #     docker compose exec -T postgres pg_isready -U postgres
      #     docker compose exec -T mongodb mongosh --eval "db.stats()"
      #     docker compose exec -T rabbitmq rabbitmqctl await_startup
      #     sleep 15

      # - name: Check User Service
      #   run: |
      #     # Test GET endpoint (register page)
      #     curl -sSf http://localhost:8000/register || exit 1
      #     # Test POST endpoint (dummy check)
      #     curl -X POST -sSf http://localhost:8000/login/ -d "email=abc@gmail.com&password=1234567890" || exit 1

      # - name: Run availability checks
      #   run: |
      #     # Check Booking Service endpoint
      #     curl --retry 3 --retry-delay 5 \
      #          -sS http://localhost:5001/book_ticket || exit 1

      #     # Verify Event Service API
      #     curl --retry 3 --retry-delay 5 \
      #          -sS http://localhost:5000/api/events || exit 1

      # - name: Cleanup
      #   if: always()
      #   run: docker compose -f docker-compose.yml down -v