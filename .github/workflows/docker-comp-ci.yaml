name: Docker Compose Integration Test

on:
  push:
    branches: ["main"]
  pull_request:
    branches: ["main"]

jobs:
  integration-test:
    strategy:
      matrix:
        os: [ubuntu-latest, windows-latest]
    runs-on: ${{ matrix.os }}
    
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Set up Docker Compose
        run: |
          sudo apt-get update
          sudo apt-get install docker-compose-plugin -y
          docker compose version

      - name: Create environment files
        run: |
          # User Service
          echo "DATABASE_URL=postgresql://postgres:123456789@postgres:5432/user_service_db" > ./user-service/.env
          echo "EVENT_SERVICE_URL=http://new-event-service:5000/api/events" >> ./user-service/.env
          echo "BOOKING_SERVICE_URL=http://booking-service:5001/book_ticket" >> ./user-service/.env
          
          # Booking Service (example - adjust according to actual needs)
          echo "DATABASE_URL=postgresql://postgres:123456789@postgres:5432/bookingdb" > ./booking-service/.env
          
          # Event Service (example)
          echo "MONGODB_URI=mongodb://mongodb:27017/events" > ./new-event-service/.env
          
          # Notification Service (example)
          echo "RABBITMQ_URL=amqp://guest:guest@rabbitmq:5672" > ./notification-service/.env
          echo "MONGODB_URI=mongodb://mongodb:27017/notifications" >> ./notification-service/.env

      - name: Start services
        run: docker compose up -d --build

      - name: Wait for critical services
        run: |
          docker compose run --rm wait-for postgres:5432 -t 30
          docker compose run --rm wait-for mongodb:27017 -t 30
          docker compose run --rm wait-for rabbitmq:5672 -t 30

      - name: Run smoke tests
        run: |
          # Test User Service
          curl -sSf http://localhost:8000/ > /dev/null
          
          # Test Event Service
          curl -sSf http://localhost:5000/api/events > /dev/null
          
          # Test Booking Service
          curl -sSf http://localhost:5001/health > /dev/null

      - name: Clean up
        if: always()
        run: docker compose down --volumes